generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Barbershop {
  id       String    @id @unique @default(uuid())
  name     String
  address  String
  imageUrl String
  services Service[]
  bookings Booking[]
}

model Service {
  id           String     @id @unique @default(uuid())
  name         String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  description  String
  imageUrl     String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
}

model Booking {
  id           String   @id @unique @default(uuid())
  userId       String
  serviceId    String
  barbershopId String
  date         DateTime

  barbershop Barbershop @relation(fields: [barbershopId], references: [id])
  service    Service    @relation(fields: [serviceId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Booking       Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
